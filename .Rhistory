polls %>%
select(-1) %>%
setNames(new_names)%>%
select(-1) %>%
mutate_at(vars(-c("dates", "pollster", "sample", "sample_2")), ~as.integer(str_remove(., "%"))) %>%
gather(candidate, points, -dates, -pollster, -sample, -sample_2)
library(rvest)
library(tidyverse)
session <- html_session("https://projects.fivethirtyeight.com/2020-primaries/democratic/national/")
session %>%
html_node(".polls-table.tracker")
session %>%
html_node(".polls-table.tracker") %>%
html_table(fill = TRUE)
polls <- session %>%
html_node(".polls-table.tracker") %>%
html_table(fill = TRUE) %>%
janitor::clean_names() %>%
as_tibble()
polls
col_names <- names(polls)
col_names
# identify the integer number of the last column
last_col <- length(col_names) - 1
# create a vector which will be used for the new names
new_names <- col_names[1:last_col]
polls %>%
select(-1) %>%
setNames(new_names)%>%
select(-1) %>%
mutate_at(vars(-c("dates", "pollster", "sample", "sample_2")), ~as.integer(str_remove(., "%")))
polls %>%
select(-1) %>%
setNames(new_names)%>%
select(-1) %>%
mutate_at(vars(-c("dates", "pollster", "sample", "sample_2")), ~as.integer(str_remove(., "%"))) %>%
gather(candidate, points, -dates, -pollster, -sample, -sample_2)
x <- polls %>%
select(-1) %>%
setNames(new_names)%>%
select(-1) %>%
mutate_at(vars(-c("dates", "pollster", "sample", "sample_2")), ~as.integer(str_remove(., "%"))) %>%
gather(candidate, points, -dates, -pollster, -sample, -sample_2)
x
x$dates[1]
y <- x$dates[1]
str_split(y, ",")
str_split(y, ",")
z <- str_split(y, ",")
z
z[[1]]
str_split(z[[1]],  "-")
z[[1]]
z
z[1]
z[[1]][1]
str_split(z[[1]][1],  "-")
dates <- str_split(z[[1]][1],  "-")
dates
?str_split
dates <- str_split(z[[1]][1],  "-", simplify = TRUE)
dates
dates <- unlist(str_split(z[[1]][1],  "-"))
dates
z %>% unlist()
z <- unlist(str_split(y, ","))
dates <- unlist(str_split(z[[1]][1],  "-"))
dates
dates <- unlist(str_split(z[1],  "-"))
dates
ifelse(!str_detect(dates[2], "[A-z+]", "nope", "yup")
)
ifelse(!str_detect(dates[2], "[A-z+]"), "nope", "yup")
str_extract(dates[1], "[A-z]+")
str_extract(dates[1], "[A-z]+")
ifelse(!str_detect(dates[2], "[A-z]+"), paste(str_extract(dates[1], "[A-z]+"), dates[2]), "yup")
ifelse(!str_detect(dates[2], "[A-z]+"),
paste(str_extract(dates[1], "[A-z]+"),
dates[2]))
z
second_date <- ifelse(!str_detect(dates[2], "[A-z]+"),
paste(str_extract(dates[1], "[A-z]+"),
dates[2]))
z
dates
z
z[2]
z <- str_split(y, ",") %>%
unlist() %>%
str_trim()
z
dates <- unlist(str_split(z[1],  "-"))
z
x
y
z
dates <- unlist(str_split(z[1],  "-"))
date_split <- str_split(y, ",") %>%
unlist() %>%
str_trim()
dates <- unlist(str_split(date_split[1],  "-"))
date_year <- dates[2]
date_year
dates
date_split
first_date <- paste(dates[1], date_year)
first_date
dates[1]
first_date
date_year
date_year <- date_split[2]
first_date <- paste(dates[1], date_year)
first_date
lubridate::mdy(first_date)
?switch
clean_date <- function(date, .return = "first") {
date_split <- str_split(date, ",") %>%
unlist() %>%
str_trim()
date_year <- date_split[2]
dates <- unlist(str_split(date_split[1],  "-"))
first_date <- paste(dates[1], date_year)
second_date <- ifelse(!str_detect(dates[2], "[A-z]+"),
paste(str_extract(dates[1], "[A-z]+"),
dates[2]))
switch(.return,
first = return(first_date),
second = return(second_date)
)
}
clean_date(original_date)
original_date <- x$dates[1]
clean_date(original_date)
clean_date(original_date, .return = "second")
clean_date <- function(date, .return = "first") {
date_split <- str_split(date, ",") %>%
unlist() %>%
str_trim()
date_year <- date_split[2]
dates <- unlist(str_split(date_split[1],  "-"))
first_date <- paste(dates[1], date_year)
second_date <- ifelse(!str_detect(dates[2], "[A-z]+"),
paste(str_extract(dates[1], "[A-z]+"),
dates[2], date_year))
switch(.return,
first = return(first_date),
second = return(second_date)
)
}
clean_date(original_date, .return = "second")
clean_date <- function(date, .return = "first") {
date_split <- str_split(date, ",") %>%
unlist() %>%
str_trim()
date_year <- date_split[2]
dates <- unlist(str_split(date_split[1],  "-"))
first_date <- paste(dates[1], date_year) %>%
lubridate::mdy()
second_date <- ifelse(!str_detect(dates[2], "[A-z]+"),
paste(str_extract(dates[1], "[A-z]+"),
dates[2],
date_year)) %>%
lubridate::mdy()
switch(.return,
first = return(first_date),
second = return(second_date)
)
}
clean_date(original_date, .return = "second")
polls %>%
select(-1) %>%
setNames(new_names)%>%
select(-1) %>%
mutate_at(vars(-c("dates", "pollster", "sample", "sample_2")), ~as.integer(str_remove(., "%"))) %>%
gather(candidate, points, -dates, -pollster, -sample, -sample_2)
polls_tidy
polls_tidy <- polls %>%
select(-1) %>%
setNames(new_names)%>%
select(-1) %>%
mutate_at(vars(-c("dates", "pollster", "sample", "sample_2")), ~as.integer(str_remove(., "%"))) %>%
gather(candidate, points, -dates, -pollster, -sample, -sample_2) %>%
mutate(sample_2 = case_when(
sample_2 == "RV" ~ "Registered Voters",
sample_2 == "LV" ~ "Likely Voters",
sample_2 == "A" ~ "Adults",
sample_2 == "V" ~ "Voters"
),
sample = as.integer(str_remove(sample, ",")))
polls_tidy
clean_date <- function(date, .return = "first") {
# take date and split at the comma to get the year and the month-day combo
date_split <- str_split(date, ",") %>%
# remove from list / coerce to vector
unlist() %>%
# remove extra white space
str_trim()
# extract the year
date_year <- date_split[2]
# split the month day portion and coerce to vector
dates <- unlist(str_split(date_split[1],  "-"))
# paste the month day and year together then parse as date using `mdy()`
first_date <- paste(dates[1], date_year) %>%
lubridate::mdy()
second_date <- ifelse(!str_detect(dates[2], "[A-z]+"),
paste(str_extract(dates[1], "[A-z]+"),
dates[2],
date_year)) %>%
lubridate::mdy()
switch(.return,
first = return(first_date),
second = return(second_date)
)
}
clean_date(polls_tidy$dates[10])
clean_date(polls_tidy$dates[10], .return = "second")
clean_date(polls_tidy$dates[10], .return = "first")
clean_date(polls_tidy$dates[10], .return = "second")
clean_date(polls_tidy$dates[10], .return = "first")
clean_date(polls_tidy$dates[10], .return = "second")
# test on a date
clean_date(polls_tidy$dates[10], .return = "first")
clean_date(polls_tidy$dates[10], .return = "second")
polls_tidy %>%
mutate(poll_start = map(dates, clean_date, "first"))
clean_date <- function(date, .return = "first") {
# take date and split at the comma to get the year and the month-day combo
date_split <- str_split(date, ",") %>%
# remove from list / coerce to vector
unlist() %>%
# remove extra white space
str_trim()
# extract the year
date_year <- date_split[2]
# split the month day portion and coerce to vector
dates <- unlist(str_split(date_split[1],  "-"))
# paste the month day and year together then parse as date using `mdy()`
first_date <- paste(dates[1], date_year) %>%
lubridate::mdy()
second_date <- ifelse(!str_detect(dates[2], "[A-z]+"),
paste(str_extract(dates[1], "[A-z]+"),
dates[2],
date_year)) %>%
lubridate::mdy()
switch(.return,
first = return(first_date),
second = return(second_date)
)
}
polls_tidy %>%
mutate(poll_start = map(dates, clean_date, "first"))
polls_tidy %>%
mutate(poll_start = map(dates, ~clean_date(., "first")))
clean_date <- function(date, .return = "first") {
# take date and split at the comma to get the year and the month-day combo
date_split <- str_split(date, ",") %>%
# remove from list / coerce to vector
unlist() %>%
# remove extra white space
str_trim()
# extract the year
date_year <- date_split[2]
# split the month day portion and coerce to vector
dates <- unlist(str_split(date_split[1],  "-"))
# paste the month day and year together then parse as date using `mdy()`
first_date <- paste(dates[1], date_year) %>%
lubridate::mdy()
second_date <- ifelse(!str_detect(dates[2], "[A-z]+"),
yes = paste(str_extract(dates[1], "[A-z]+"),
dates[2],
date_year),
no = paste(dates[2], date_year)) %>%
lubridate::mdy()
switch(.return,
first = return(first_date),
second = return(second_date)
)
}
# test on a date
clean_date(polls_tidy$dates[10], .return = "first")
clean_date(polls_tidy$dates[10], .return = "second")
polls_tidy %>%
mutate(poll_start = map(dates, ~clean_date(., "first")))
polls_tidy %>%
mutate(poll_start = clean_date(dates, "first"))
polls_tidy %>%
mutate(poll_start = clean_date(dates, "first"),
poll_end = clean_date(dates, "second"))
polls_clean <- polls_tidy %>%
mutate(poll_start = clean_date(dates, "first"),
poll_end = clean_date(dates, "second")) %>%
select(-dates)
polls_clean
polls_clean %>%
group_by(candidate) %>%
summarise(avg_points = mean(points),
max_points = max(points),
min_points = min(points),
sd_points = sd(points))
polls_clean %>%
group_by(candidate) %>%
summarise_at(vars(points), .funs = list(mean, max, min, sd))
polls_clean %>%
group_by(candidate) %>%
summarise_at(vars(points), .funs = list(mean, max, min, sd, na.rm = TRUE))
?summarise_at
polls_clean %>%
group_by(candidate) %>%
summarise_at(vars(points), .funs = list(mean, max, min, sd), na.rm = TRUE))
polls_clean %>%
group_by(candidate) %>%
summarise_at(vars(points), .funs = list(mean, max, min, sd), na.rm = TRUE)
polls_clean %>%
group_by(candidate) %>%
summarise_at(vars(points), .funs = list(avg = mean, max = max, min =  min, sd = sd), na.rm = TRUE)
polls_clean %>%
group_by(candidate) %>%
summarise_at(.vars = vars(points),
.funs = list(avg = mean, max = max,
min =  min, sd = sd),
na.rm = TRUE)
polls_clean %>%
group_by(candidate) %>%
summarise_at(.vars = vars(points),
.funs = list(avg = mean, max = max,
min =  min, sd = sd),
na.rm = TRUE) %>%
arrange(-avg)
polls_clean %>%
group_by(candidate) %>%
summarise_at(.vars = vars(points),
.funs = list(avg = mean, median = median, max = max,
min =  min, sd = sd),
na.rm = TRUE) %>%
arrange(-avg)
polls_clean %>%
group_by(candidate) %>%
summarise_at(.vars = vars(points),
.funs = list(avg = mean, median = median, max = max,
min =  min, sd = sd),
na.rm = TRUE) %>%
arrange(-median)
avg_polls <- polls_clean %>%
group_by(candidate) %>%
summarise(avg_points = mean(points, na.rm = TRUE),
min_points = min(points, na.rm = TRUE),
max_points = max(points, na.rm = TRUE),
n_polls = n() - sum(is.na(points))) %>% # identify how many polls candidate is in
filter(n_polls > 50) %>%
arrange(-avg_points)
avg_polls
avg_polls %>%
ggplot(aes(candidate, avg_points)) +
geom_col() +
theme_minimal()
avg_polls %>%
ggplot(aes(candidate, avg_points)) +
geom_col() +
theme_minimal() +
coord_flip()
avg_polls %>%
mutate(candidate = fct_reorder(candidate, avg_points))
avg_polls %>%
mutate(candidate = fct_reorder(candidate, avg_points)) %>%
ggplot(aes(candidate, avg_points)) +
geom_col() +
theme_minimal() +
coord_flip()
avg_polls %>%
mutate(candidate = fct_reorder(candidate, avg_points)) %>%
ggplot(aes(candidate, avg_points)) +
geom_col() +
theme_minimal() +
coord_flip() +
labs(title = "Polls Standings", x = "", y = "%")
spell_check()
bookdown::serve_book()
bookdown::serve_book(output_dir = "docs")
poolls_clean
polls_clean
sample_frac(polls_clean, prob = .8)
sample_frac(polls_clean, prob = .8)
?sample_frac(polls_clean, prob = .8)
?sample_frac(polls_clean, .8)
sample_frac(polls_clean, .8)
sample_frac(polls_clean, size = .8)
write_csv(sample_frac(polls_clean, size = .8), "data/polls.csv")
old_polls <- read_csv("data/polls.csv")
library(tidyverse)
old_polls <- read_csv("data/polls.csv")
old_polls
polls_clean <- polls_tidy %>%
mutate(poll_start = clean_date(dates, "first"),
poll_end = clean_date(dates, "second")) %>%
select(-dates) %>%
filter(!is.na(points))
polls_clean
avg_polls <- polls_clean %>%
group_by(candidate) %>%
summarise(avg_points = mean(points, na.rm = TRUE),
min_points = min(points, na.rm = TRUE),
max_points = max(points, na.rm = TRUE),
n_polls = n() - sum(is.na(points))) %>% # identify how many polls candidate is in
# remove candidates who appear in 50 or fewer polls: i.e. HRC
filter(n_polls > 50) %>%
arrange(-avg_points)
avg_polls
avg_polls %>%
mutate(candidate = fct_reorder(candidate, avg_points)) %>%
ggplot(aes(candidate, avg_points)) +
geom_col() +
theme_minimal() +
coord_flip() +
labs(title = "Polls Standings", x = "", y = "%")
write_csv(sample_frac(polls_clean, size = .8), "data/polls.csv")
old_polls <- read_csv("data/polls.csv")
old_polls
?anti_join
bind_rows(old_polls, polls_clean)
bind_rows(old_polls, polls_clean) %>%
distinct()
poll_clean
polls_clean
old_polls
distinct(polls_clean)
polls_clean <- polls_tidy %>%
mutate(poll_start = clean_date(dates, "first"),
poll_end = clean_date(dates, "second")) %>%
select(-dates) %>%
filter(!is.na(points)) %>%
distinct()
polls_clean
write_csv(sample_frac(polls_clean, size = .8), "data/polls.csv")
old_polls <- read_csv("data/polls.csv")
old_polls
old_polls <- read_csv("data/polls.csv")
old_polls
updated_polls <- bind_rows(old_polls, polls_clean) %>%
distinct()
updated_polls
bookdown::serve_chapter
bookdown::serve_chapter()
bookdown::render_chapter()
bookdown::preview_chapter()
bookdown::preview_chapter("10-web-scraping.Rmd")
bookdown::serve_book(output_dir = "docs")
