[
["state-voter-files.html", "Chapter 7 State Voter Files 7.1 Motivation 7.2 Overview 7.3 Exercise", " Chapter 7 State Voter Files 7.1 Motivation Who one votes for is private, but when someone votes is a matter of public record. A state’s Secretary of State (SOS) maintains a public record of who voted. The accompanying data may vary state by state. For example, the state of New Hampshire does not record the age of the person voting. Companies such as Catalist have built their business around aggregating, cleaning, and enhancing public voter files. However, these databases can be quite expensive and are not updated at the same pace as the state voter file. 7.2 Overview In this section we will demonstrate how to programatically download and clean the state voterfile. From there, we will identify potential voters and canvassing targets. Once those targets have been identified, they can be uploaded as a list into VAN based on their SOS ID which should be present depending on your provider. The OH SOS website provide links to the voter file which are updated frequently. These files were last updated on July 19th, 2019 as of today (July 21st, 2019). We will combine the webscraping tools (rvest) that we previously learned and combine them with dplyr and data.table—a package that works exceptionally well with large data, see the wiki for a primer. 7.3 Exercise As always, let’s set up our workspace. library(rvest) library(data.table) library(dplyr) The first step is to use rvest to identify the URLs that we can use to download the voter-file. To do this, use the inspector tool in your web browser and identify the HTML elements of interest. In this use case, we will specify the highlight-row class and the a (anchor) tag. The a tag is used to create hyperlinks within a document. The href attribute is used to specify the hyperlink. We can extract the href attribute using rvest::html_attr(). 7.3.1 Identifying download links session &lt;- html_session(&quot;https://www6.sos.state.oh.us/ords/f?p=VOTERFTP:STWD:::#stwdVtrFiles&quot;) html_nodes(session, &quot;.highlight-row a&quot;) %&gt;% html_attr(&quot;href&quot;) ## [1] &quot;f?p=VOTERFTP:DOWNLOAD::FILE:NO:2:P2_PRODUCT_NUMBER:363&quot; ## [2] &quot;f?p=VOTERFTP:DOWNLOAD::FILE:NO:2:P2_PRODUCT_NUMBER:364&quot; ## [3] &quot;f?p=VOTERFTP:DOWNLOAD::FILE:NO:2:P2_PRODUCT_NUMBER:365&quot; ## [4] &quot;f?p=VOTERFTP:DOWNLOAD::FILE:NO:2:P2_PRODUCT_NUMBER:366&quot; Notice that this does not actually provide the full URL that is needed, but rather the query parameters. We can iteratively append this to the base url—in this case https://www6.sos.state.oh.us/ords/—using purrr::map(). file_urls &lt;- html_nodes(session, &quot;.highlight-row a&quot;) %&gt;% html_attr(&quot;href&quot;) %&gt;% purrr::map_chr(~paste0(&quot;https://www6.sos.state.oh.us/ords/&quot;, .)) file_urls ## [1] &quot;https://www6.sos.state.oh.us/ords/f?p=VOTERFTP:DOWNLOAD::FILE:NO:2:P2_PRODUCT_NUMBER:363&quot; ## [2] &quot;https://www6.sos.state.oh.us/ords/f?p=VOTERFTP:DOWNLOAD::FILE:NO:2:P2_PRODUCT_NUMBER:364&quot; ## [3] &quot;https://www6.sos.state.oh.us/ords/f?p=VOTERFTP:DOWNLOAD::FILE:NO:2:P2_PRODUCT_NUMBER:365&quot; ## [4] &quot;https://www6.sos.state.oh.us/ords/f?p=VOTERFTP:DOWNLOAD::FILE:NO:2:P2_PRODUCT_NUMBER:366&quot; With that, we now have the file paths for the four statewide voter file data sets. For the sake of computation and memory, we will only work with the first URL. 7.3.2 Download the voter file Now that we have the links to the voter file, we can use R to download them using download.file(). The first argument is the link to the file, the second is the destination of that file. Here we are saving the first file into the data folder. You can also do this iteratively using purrr::map(). # download the file as a .txt.gz (that&#39;s the file format if you download it from the web) download.file(file_urls[1], destfile = &quot;data/SWVF_1_22 (Adams-Erie).txt.gz&quot;) Note that the file is in .gz compressed format. We can uncompress this using R.utils::gunzip() which will return the compressed file. R.utils::gunzip(&quot;data/SWVF_1_22 (Adams-Erie).txt.gz&quot;) data.table reads text files using fread(). Since this file is very large, we will take only the first 10,000 observations. Do this by setting the nrows argument to 10000. Since data.table is an extension upon the data.frame, we can combine both data.table aand dplyr functions. 7.3.3 Voter file exploratoration swvf &lt;- fread(&quot;data/SWVF_1_22 (Adams-Erie).txt&quot;, nrows = 10000) Do your due dilligence and look at all 106 columns. This is a great time to embrace dirty data. Are the data tidy? glimpse(swvf) ## Observations: 10,000 ## Variables: 106 ## $ SOS_VOTERID &lt;chr&gt; &quot;OH0016238254&quot;, &quot;OH0019414074&quot;, &quot;O… ## $ COUNTY_NUMBER &lt;int&gt; 6, 2, 6, 9, 18, 13, 18, 18, 13, 4,… ## $ COUNTY_ID &lt;int&gt; 21511, 1010005, 40055, 482703, 204… ## $ LAST_NAME &lt;chr&gt; &quot;KUETHER&quot;, &quot;GEMLICK&quot;, &quot;KITCHEN&quot;, &quot;… ## $ FIRST_NAME &lt;chr&gt; &quot;BARBARA&quot;, &quot;JODI&quot;, &quot;LESLIE&quot;, &quot;AMAN… ## $ MIDDLE_NAME &lt;chr&gt; &quot;A&quot;, &quot;LYN&quot;, &quot;L&quot;, &quot;LEIGH&quot;, &quot;J&quot;, &quot;L&quot;… ## $ SUFFIX &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;… ## $ DATE_OF_BIRTH &lt;chr&gt; &quot;1969-11-15&quot;, &quot;1972-08-19&quot;, &quot;1969-… ## $ REGISTRATION_DATE &lt;chr&gt; &quot;1998-02-23&quot;, &quot;2007-01-29&quot;, &quot;2008-… ## $ VOTER_STATUS &lt;chr&gt; &quot;ACTIVE&quot;, &quot;ACTIVE&quot;, &quot;ACTIVE&quot;, &quot;ACT… ## $ PARTY_AFFILIATION &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;D&quot;, &quot;… ## $ RESIDENTIAL_ADDRESS1 &lt;chr&gt; &quot;725 OAKWOOD DR&quot;, &quot;3464 WOODHAVEN … ## $ RESIDENTIAL_SECONDARY_ADDR &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;… ## $ RESIDENTIAL_CITY &lt;chr&gt; &quot;MINSTER&quot;, &quot;LIMA&quot;, &quot;ST MARYS&quot;, &quot;MO… ## $ RESIDENTIAL_STATE &lt;chr&gt; &quot;OH&quot;, &quot;OH&quot;, &quot;OH&quot;, &quot;OH&quot;, &quot;OH&quot;, &quot;OH&quot;… ## $ RESIDENTIAL_ZIP &lt;int&gt; 45865, 45806, 45885, 45050, 44105,… ## $ RESIDENTIAL_ZIP_PLUS4 &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA… ## $ RESIDENTIAL_COUNTRY &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA… ## $ RESIDENTIAL_POSTALCODE &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA… ## $ MAILING_ADDRESS1 &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;… ## $ MAILING_SECONDARY_ADDRESS &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA… ## $ MAILING_CITY &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;… ## $ MAILING_STATE &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;… ## $ MAILING_ZIP &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA… ## $ MAILING_ZIP_PLUS4 &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA… ## $ MAILING_COUNTRY &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;… ## $ MAILING_POSTAL_CODE &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;… ## $ CAREER_CENTER &lt;chr&gt; &quot;&quot;, &quot;APOLLO CAREER CENTER&quot;, &quot;&quot;, &quot;&quot;… ## $ CITY &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;ST. MARYS CITY&quot;, &quot;MONROE … ## $ CITY_SCHOOL_DISTRICT &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;ST MARYS CITY SD&quot;, &quot;&quot;, &quot;C… ## $ COUNTY_COURT_DISTRICT &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA… ## $ CONGRESSIONAL_DISTRICT &lt;int&gt; 4, 4, 4, 8, 11, 2, 11, 16, 2, 14, … ## $ COURT_OF_APPEALS &lt;int&gt; 3, 3, 3, 12, 8, 12, 8, 8, 12, 11, … ## $ EDU_SERVICE_CENTER_DISTRICT &lt;chr&gt; &quot;AUGLAIZE COUNTY ESC&quot;, &quot;ALLEN COUN… ## $ EXEMPTED_VILL_SCHOOL_DISTRICT &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;… ## $ LIBRARY &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA… ## $ LOCAL_SCHOOL_DISTRICT &lt;chr&gt; &quot;MINSTER LOCAL SD (AUGLAIZE)&quot;, &quot;SH… ## $ MUNICIPAL_COURT_DISTRICT &lt;chr&gt; &quot;&quot;, &quot;LIMA&quot;, &quot;&quot;, &quot;&quot;, &quot;CLEVELAND&quot;, &quot;… ## $ PRECINCT_NAME &lt;chr&gt; &quot;PRECINCT MINSTER N&quot;, &quot;SHAWNEE H&quot;,… ## $ PRECINCT_CODE &lt;chr&gt; &quot;06AAZ&quot;, &quot;02AFU&quot;, &quot;06AAE&quot;, &quot;09-P-A… ## $ STATE_BOARD_OF_EDUCATION &lt;int&gt; 1, 1, 1, 3, 11, 10, 11, 5, 10, 7, … ## $ STATE_REPRESENTATIVE_DISTRICT &lt;int&gt; 84, 4, 82, 53, 9, 65, 12, 16, 65, … ## $ STATE_SENATE_DISTRICT &lt;int&gt; 12, 12, 1, 4, 21, 14, 25, 24, 14, … ## $ TOWNSHIP &lt;chr&gt; &quot;JACKSON TOWNSHIP&quot;, &quot;Township Shaw… ## $ VILLAGE &lt;chr&gt; &quot;MINSTER VILLAGE&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;,… ## $ WARD &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;ST. MARYS WARD 3&quot;, &quot;&quot;, &quot;C… ## $ `PRIMARY-03/07/2000` &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;… ## $ `GENERAL-11/07/2000` &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;X&quot;, &quot;X&quot;, … ## $ `SPECIAL-05/08/2001` &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;… ## $ `GENERAL-11/06/2001` &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;X&quot;, &quot;&quot;, &quot;… ## $ `PRIMARY-05/07/2002` &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;… ## $ `GENERAL-11/05/2002` &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;X&quot;, &quot;&quot;, &quot;… ## $ `SPECIAL-05/06/2003` &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;… ## $ `GENERAL-11/04/2003` &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;… ## $ `PRIMARY-03/02/2004` &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;D&quot;, &quot;&quot;, &quot;… ## $ `GENERAL-11/02/2004` &lt;chr&gt; &quot;&quot;, &quot;X&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;X&quot;, &quot;&quot;, … ## $ `SPECIAL-02/08/2005` &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;X… ## $ `PRIMARY-05/03/2005` &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;… ## $ `PRIMARY-09/13/2005` &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA… ## $ `GENERAL-11/08/2005` &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;X&quot;, &quot;&quot;, &quot;… ## $ `SPECIAL-02/07/2006` &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;… ## $ `PRIMARY-05/02/2006` &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;D&quot;, &quot;&quot;, &quot;… ## $ `GENERAL-11/07/2006` &lt;chr&gt; &quot;X&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;X&quot;, &quot;X&quot;,… ## $ `PRIMARY-05/08/2007` &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;… ## $ `PRIMARY-09/11/2007` &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA… ## $ `GENERAL-11/06/2007` &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;… ## $ `PRIMARY-11/06/2007` &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;… ## $ `GENERAL-12/11/2007` &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;… ## $ `PRIMARY-03/04/2008` &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;D&quot;, &quot;D&quot;, … ## $ `PRIMARY-10/14/2008` &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA… ## $ `GENERAL-11/04/2008` &lt;chr&gt; &quot;X&quot;, &quot;&quot;, &quot;&quot;, &quot;X&quot;, &quot;&quot;, &quot;X&quot;, &quot;X&quot;, &quot;X… ## $ `GENERAL-11/18/2008` &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA… ## $ `PRIMARY-05/05/2009` &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;… ## $ `PRIMARY-09/08/2009` &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;… ## $ `PRIMARY-09/15/2009` &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA… ## $ `PRIMARY-09/29/2009` &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;… ## $ `GENERAL-11/03/2009` &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;X&quot;, &quot;&quot;, &quot;&quot;, &quot;X&quot;, &quot;&quot;, … ## $ `PRIMARY-05/04/2010` &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;… ## $ `PRIMARY-07/13/2010` &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;… ## $ `PRIMARY-09/07/2010` &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;… ## $ `GENERAL-11/02/2010` &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;X&quot;, &quot;&quot;, &quot;X&quot;, &quot;X&quot;, &quot;X&quot;… ## $ `PRIMARY-05/03/2011` &lt;chr&gt; &quot;X&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;… ## $ `PRIMARY-09/13/2011` &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA… ## $ `GENERAL-11/08/2011` &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;X&quot;, &quot;&quot;, &quot;X&quot;, &quot;X&quot;, &quot;&quot;,… ## $ `PRIMARY-03/06/2012` &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;D&quot;, &quot;&quot;, &quot;… ## $ `GENERAL-11/06/2012` &lt;chr&gt; &quot;X&quot;, &quot;&quot;, &quot;X&quot;, &quot;X&quot;, &quot;&quot;, &quot;X&quot;, &quot;X&quot;, &quot;… ## $ `PRIMARY-05/07/2013` &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;X&quot;, &quot;&quot;, &quot;&quot;, &quot;… ## $ `PRIMARY-09/10/2013` &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA… ## $ `PRIMARY-10/01/2013` &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA… ## $ `GENERAL-11/05/2013` &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;X&quot;, &quot;&quot;, &quot;&quot;, &quot;X&quot;, &quot;&quot;, … ## $ `PRIMARY-05/06/2014` &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;D&quot;, &quot;&quot;, &quot;… ## $ `GENERAL-11/04/2014` &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;X&quot;, &quot;&quot;, &quot;X&quot;, &quot;X&quot;, &quot;X&quot;… ## $ `PRIMARY-05/05/2015` &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;… ## $ `PRIMARY-09/15/2015` &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA… ## $ `GENERAL-11/03/2015` &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;X&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;… ## $ `PRIMARY-03/15/2016` &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;D&quot;, &quot;… ## $ `GENERAL-06/07/2016` &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;… ## $ `PRIMARY-09/13/2016` &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;… ## $ `GENERAL-11/08/2016` &lt;chr&gt; &quot;&quot;, &quot;X&quot;, &quot;&quot;, &quot;X&quot;, &quot;&quot;, &quot;X&quot;, &quot;X&quot;, &quot;X… ## $ `PRIMARY-05/02/2017` &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;… ## $ `PRIMARY-09/12/2017` &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;X&quot;, &quot;X&quot;, … ## $ `GENERAL-11/07/2017` &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;X&quot;, &quot;… ## $ `PRIMARY-05/08/2018` &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;… ## $ `GENERAL-08/07/2018` &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;… ## $ `GENERAL-11/06/2018` &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;X&quot;, &quot;X&quot;, &quot;&quot;, &quot;&quot;, &quot;X&quot;, &quot;X&quot;… ## $ `PRIMARY-05/07/2019` &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;… Nope! They are not tidy. Currently each row represents one voter and the events are on the columns following the format ELECTION TYPE-MM/DD/YYYY. The date of the election should be its own column as should the type (i.e. general, primary, or special). These data need to be converted to a longer format where each row is a unique combination of one voter and election. This means that if an individual voted in five elections, there would be five observations. There are two main steps that need to be taken to tidy up these data. Collect the column headers and their respective values into two new columns: election, and party. Since the column headers contain two variables of interest, namely the election type and election date, the column will be split into two. Usually we would use gather() or pivot_longer() from tidyr. However, these data are quite large and we need to write preformative code. data.table uses data.table::melt() to preform the same operation but is much faster. In this example we specify the id columns. These are the columns that will not be gathered into a new column. We also specify the name of the variable that will be created from the column headers with the variable.name argument. Next, we specfiy the name of the column that will contain the values. sw_gathered &lt;- swvf %&gt;% melt(id = 1:46, variable.name = &quot;election&quot;, value.name = &quot;party&quot;) %&gt;% janitor::clean_names() Preview the results of melt(). The example below uses dplyr::distinct() to identify unique value pairs. # Now we can view the results. The election column can be easily split into two different columns. The election type (i.e. primary or general) and the date of the election. Next, the result column looks like there is a lot of room for cleaning. There are &quot;&quot; where NA should be. distinct(sw_gathered, election, party) ## election party ## 1: PRIMARY-03/07/2000 ## 2: PRIMARY-03/07/2000 D ## 3: PRIMARY-03/07/2000 X ## 4: PRIMARY-03/07/2000 R ## 5: PRIMARY-03/07/2000 L ## --- ## 170: GENERAL-11/06/2018 X ## 171: PRIMARY-05/07/2019 ## 172: PRIMARY-05/07/2019 X ## 173: PRIMARY-05/07/2019 R ## 174: PRIMARY-05/07/2019 D Notice that there are multiple values for party. What are these? # what are the unique values? distinct(sw_gathered, party) ## party ## 1: ## 2: D ## 3: X ## 4: R ## 5: L ## 6: &lt;NA&gt; ## 7: C ## 8: G 7.3.4 Tidying The SOS website has a downloadable data dictionary. The Voter File Layout says: The data dictionary Variable filed name with election type and date of each election. Value for this field indicates how the voter voted in that election. Abbr. Party Name C Constitution Party D Democrat Party E Reform Party G Green Party L Libertarian Party N Natural Law Party R Republican Party S Socialist Party X Voted without declaring party affiliation Blank Indicates that there is no voting record for this voter for this election We can use this to clean up the party field using case_when(). To create two separate columns for the election type and date, we can split on the first -. tidyr::separate() will split the column into two or more columns based on the sep argument. Once the election_date column has been created, we will need to parse it accordingly using lubridate. Since the date column is formatted as MM/DD/YYYY we can use lubridate::mdy() to parse it to class Date. sw_clean &lt;- sw_gathered %&gt;% tidyr::separate(election, into = c(&quot;election_type&quot;, &quot;election_date&quot;), sep = &quot;-&quot;) %&gt;% mutate(election_date = lubridate::mdy(election_date), party = case_when( party == &quot;C&quot; ~ &quot;Constitution&quot;, party == &quot;D&quot; ~ &quot;Democrat&quot;, party == &quot;E&quot; ~ &quot;Reform&quot;, party == &quot;G&quot; ~ &quot;Green&quot;, party == &quot;L&quot; ~ &quot;Libertarian&quot;, party == &quot;N&quot; ~ &quot;Natural Law&quot;, party == &quot;R&quot; ~ &quot;Republican&quot;, party == &quot;S&quot; ~ &quot;Socialist&quot;, party == &quot;X&quot; ~ &quot;Independent&quot; )) sw_clean ## sos_voterid county_number county_id last_name first_name middle_name ## 1 OH0016238254 6 21511 KUETHER BARBARA A ## 2 OH0019414074 2 1010005 GEMLICK JODI LYN ## 3 OH0019419095 6 40055 KITCHEN LESLIE L ## 4 OH0019489283 9 482703 GRACE AMANDA LEIGH ## 5 OH0015384921 18 2044314 CARNER TIFFANY J ## 6 OH0020115764 13 6100757 VAN SCYOC SUSAN L ## 7 OH0015058130 18 1674659 BERRY NICOLE L ## 8 OH0015138398 18 1775588 GILCHRIST LAUREN E ## 9 OH0017921202 13 155695 MEADORS NANCY LOUISE ## 10 OH0020901137 4 9642563 ANDERSON DAVID A ## 11 OH0021110639 13 6114771 PANGUITO GAIL M ## 12 OH0021216967 18 2470286 TOOHEY MARGARET M ## 13 OH0015214880 18 1863083 TAG JESSICA ## 14 OH0018242491 7 33803 KOZEL HENRY CHARLES ## 15 OH0012639909 17 12573 PRY DOUGLAS A ## 16 OH0019156107 18 2253681 BARRY COLLEEN L ## 17 OH0021892836 3 9633538 MILLER TREVOR IAN ## 18 OH0014978513 18 1005945 EDWARDS CYNTHIA A ## 19 OH0021955947 18 2554809 TOWNSEND KIARA ## 20 OH0018713790 9 459591 SCHUL KATIE MICHELLE ## suffix date_of_birth registration_date voter_status party_affiliation ## 1 1969-11-15 1998-02-23 ACTIVE ## 2 1972-08-19 2007-01-29 ACTIVE ## 3 1969-12-26 2008-01-09 ACTIVE ## 4 1974-11-09 2008-02-01 ACTIVE ## 5 1971-08-28 2016-05-25 ACTIVE ## 6 1973-08-01 2008-09-18 ACTIVE ## 7 1975-04-25 2009-08-19 ACTIVE ## 8 1978-12-02 1999-04-30 ACTIVE D ## 9 1943-04-07 1997-06-27 ACTIVE ## 10 1943-07-14 2009-11-30 ACTIVE R ## 11 1972-03-16 2010-07-14 CONFIRMATION ## 12 1992-09-24 2017-10-09 ACTIVE ## 13 1982-12-31 2010-12-21 ACTIVE D ## 14 1927-09-07 1977-11-08 CONFIRMATION ## 15 1967-05-05 2015-05-14 ACTIVE R ## 16 1978-06-30 2011-07-22 ACTIVE ## 17 1987-08-24 2012-08-20 ACTIVE R ## 18 1962-05-03 2012-09-22 ACTIVE ## 19 1974-10-30 2012-09-11 CONFIRMATION ## 20 1987-03-02 2012-09-20 ACTIVE ## residential_address1 residential_secondary_addr ## 1 725 OAKWOOD DR ## 2 3464 WOODHAVEN LN ## 3 122 CONCORD AVE ## 4 932 SLEEPY HOLLOW DR ## 5 13902 BENWOOD AVE ## 6 1090 S MUSCOVY DR ## 7 16308 KOLLIN AVE ## 8 3419 E OXFORD OVAL ## 9 6137 TAYLOR PIKE ## 10 6787 LINDSLEY AV ## 11 6321 TRAIL RIDGE CT ## 12 25 PEPPER CREEK DR ## 13 1916 W 50TH ST ## 14 55505 BLOOMINGDALE ST WOLFHURST ## 15 4691 BAKER RD ## 16 6103 NORTHCLIFF AVE ## 17 1998 TR 1095 ## 18 14307 GRANGER RD ## 19 11910 BUCKEYE RD ## 20 18 TWIN LAKES DR ## residential_city residential_state residential_zip ## 1 MINSTER OH 45865 ## 2 LIMA OH 45806 ## 3 ST MARYS OH 45885 ## 4 MONROE OH 45050 ## 5 CLEVELAND OH 44105 ## 6 LOVELAND OH 45140 ## 7 CLEVELAND OH 44128 ## 8 NORTH OLMSTED OH 44070 ## 9 BLANCHESTER OH 45107 ## 10 ANDOVER OH 44003 ## 11 LOVELAND OH 45140 ## 12 PEPPER PIKE OH 44124 ## 13 CLEVELAND OH 44102 ## 14 BRIDGEPORT OH 43912 ## 15 CRESTLINE OH 44827 ## 16 BROOKLYN OH 44144 ## 17 ASHLAND OH 44805 ## 18 MAPLE HTS OH 44137 ## 19 CLEVELAND OH 44120 ## 20 FAIRFIELD OH 45014 ## residential_zip_plus4 residential_country residential_postalcode ## 1 NA NA NA ## 2 NA NA NA ## 3 NA NA NA ## 4 NA NA NA ## 5 NA NA NA ## 6 NA NA NA ## 7 NA NA NA ## 8 NA NA NA ## 9 NA NA NA ## 10 NA NA NA ## 11 NA NA NA ## 12 NA NA NA ## 13 NA NA NA ## 14 NA NA NA ## 15 NA NA NA ## 16 NA NA NA ## 17 NA NA NA ## 18 NA NA NA ## 19 NA NA NA ## 20 NA NA NA ## mailing_address1 mailing_secondary_address mailing_city mailing_state ## 1 NA ## 2 NA ## 3 NA ## 4 NA ## 5 NA ## 6 NA ## 7 NA ## 8 NA ## 9 NA ## 10 NA ## 11 NA ## 12 NA ## 13 NA ## 14 NA ## 15 NA ## 16 NA ## 17 NA ## 18 NA ## 19 NA ## 20 NA ## mailing_zip mailing_zip_plus4 mailing_country mailing_postal_code ## 1 NA NA ## 2 NA NA ## 3 NA NA ## 4 NA NA ## 5 NA NA ## 6 NA NA ## 7 NA NA ## 8 NA NA ## 9 NA NA ## 10 NA NA ## 11 NA NA ## 12 NA NA ## 13 NA NA ## 14 NA NA ## 15 NA NA ## 16 NA NA ## 17 NA NA ## 18 NA NA ## 19 NA NA ## 20 NA NA ## career_center city ## 1 ## 2 APOLLO CAREER CENTER ## 3 ST. MARYS CITY ## 4 MONROE CITY ## 5 ## 6 GREAT OAKS CAREER CAMPUSES ## 7 ## 8 POLARIS CAREER CENTER ## 9 GREAT OAKS CAREER CAMPUSES ## 10 ## 11 GREAT OAKS CAREER CAMPUSES ## 12 ## 13 ## 14 BELMONT-HARRISON CAREER CENTER ## 15 PIONEER CAREER &amp; TECH CENTER ## 16 POLARIS CAREER CENTER ## 17 ASHLAND COUNTY-WEST HOLMES JVSD ## 18 ## 19 ## 20 FAIRFIELD CITY ## city_school_district county_court_district ## 1 NA ## 2 NA ## 3 ST MARYS CITY SD NA ## 4 NA ## 5 CLEVELAND MUNICIPAL CITY SD NA ## 6 NA ## 7 CLEVELAND MUNICIPAL CITY SD NA ## 8 NORTH OLMSTED CITY SD NA ## 9 NA ## 10 NA ## 11 NA ## 12 ORANGE CITY SD NA ## 13 CLEVELAND MUNICIPAL CITY SD NA ## 14 NA ## 15 NA ## 16 BROOKLYN CITY SD NA ## 17 NA ## 18 MAPLE HEIGHTS CITY SD NA ## 19 CLEVELAND MUNICIPAL CITY SD NA ## 20 FAIRFIELD CITY SD NA ## congressional_district court_of_appeals edu_service_center_district ## 1 4 3 AUGLAIZE COUNTY ESC ## 2 4 3 ALLEN COUNTY ESC ## 3 4 3 ## 4 8 12 BUTLER COUNTY ESC ## 5 11 8 ## 6 2 12 ## 7 11 8 ## 8 16 8 ## 9 2 12 ## 10 14 11 ASHTABULA COUNTY ESC ## 11 2 12 ## 12 11 8 ## 13 11 8 ## 14 6 7 ## 15 4 3 MID-OHIO ESC ## 16 9 8 ## 17 7 5 TRI-COUNTY ESC ## 18 11 8 ## 19 11 8 ## 20 8 12 ## exempted_vill_school_district library ## 1 NA ## 2 NA ## 3 NA ## 4 NA ## 5 NA ## 6 NA ## 7 NA ## 8 NA ## 9 NA ## 10 NA ## 11 NA ## 12 NA ## 13 NA ## 14 BRIDGEPORT EX VILL SD (BELMONT) NA ## 15 NA ## 16 NA ## 17 NA ## 18 NA ## 19 NA ## 20 NA ## local_school_district municipal_court_district ## 1 MINSTER LOCAL SD (AUGLAIZE) ## 2 SHAWNEE LOCAL SD (ALLEN) LIMA ## 3 ## 4 MONROE LOCAL SD (BUTLER) ## 5 CLEVELAND ## 6 ## 7 CLEVELAND ## 8 ROCKY-RIVER ## 9 ## 10 PYMATUNING VALLEY LOCAL SD (ASHTABULA) ## 11 ## 12 SHAKER-HEIGHTS ## 13 CLEVELAND ## 14 ## 15 BUCKEYE CENTRAL LOCAL SD (CRAWFORD) ## 16 PARMA ## 17 HILLSDALE LOCAL SD (ASHLAND) ## 18 GARFIELD-HEIGHTS ## 19 CLEVELAND ## 20 ## precinct_name precinct_code state_board_of_education ## 1 PRECINCT MINSTER N 06AAZ 1 ## 2 SHAWNEE H 02AFU 1 ## 3 PRECINCT ST. MARYS 3A 06AAE 1 ## 4 MONROE 2 09-P-AKN 3 ## 5 CLEVELAND-02-Q 18-P-ALJ 11 ## 6 MIAMI TOWNSHIP X 13-P-ACY 10 ## 7 CLEVELAND-01-E 18-P-AIA 11 ## 8 NORTH OLMSTED-02-C 18-P-CDV 5 ## 9 WAYNE TOWNSHIP B 13-P-AGV 10 ## 10 PRECINCT WMSFLD TWP 2 04AEW 7 ## 11 MIAMI TOWNSHIP L1L 13-P-AHS 10 ## 12 PEPPER PIKE-00-D 18-P-CNB 11 ## 13 CLEVELAND-15-J 18-P-BDX 11 ## 14 PRECINCT PEASE TWP 2 07ABW 8 ## 15 VERNON TWP 17-P-ACN 1 ## 16 BROOKLYN-00-H 18-P-AGJ 11 ## 17 PRECINCT MIFFLIN 03ACV 5 ## 18 MAPLE HEIGHTS-03-B 18-P-CAE 11 ## 19 CLEVELAND-04-E 18-P-AMQ 11 ## 20 FAIR7WD1 09-P-AAG 3 ## state_representative_district state_senate_district township ## 1 84 12 JACKSON TOWNSHIP ## 2 4 12 Township Shawnee ## 3 82 1 ST MARYS TOWNSHIP ## 4 53 4 LEMON TOWNSHIP ## 5 9 21 ## 6 65 14 MIAMI TWP ## 7 12 25 ## 8 16 24 ## 9 65 14 WAYNE TWP ## 10 64 32 WILLIAMSFIELD TWP ## 11 65 14 MIAMI TWP ## 12 12 25 ## 13 13 23 ## 14 96 30 PEASE TOWNSHIP ## 15 87 26 VERNON TOWNSHIP ## 16 14 23 ## 17 70 22 MIFFLIN-COMBINED ## 18 12 25 ## 19 9 21 ## 20 51 4 ## village ward election_type election_date ## 1 MINSTER VILLAGE PRIMARY 2000-03-07 ## 2 PRIMARY 2000-03-07 ## 3 ST. MARYS WARD 3 PRIMARY 2000-03-07 ## 4 PRIMARY 2000-03-07 ## 5 CLEVELAND WARD 2 PRIMARY 2000-03-07 ## 6 PRIMARY 2000-03-07 ## 7 CLEVELAND WARD 1 PRIMARY 2000-03-07 ## 8 NORTH OLMSTED WARD 2 PRIMARY 2000-03-07 ## 9 PRIMARY 2000-03-07 ## 10 PRIMARY 2000-03-07 ## 11 PRIMARY 2000-03-07 ## 12 PRIMARY 2000-03-07 ## 13 CLEVELAND WARD 15 PRIMARY 2000-03-07 ## 14 PRIMARY 2000-03-07 ## 15 PRIMARY 2000-03-07 ## 16 PRIMARY 2000-03-07 ## 17 PRIMARY 2000-03-07 ## 18 MAPLE HEIGHTS DISTRICT 3 PRIMARY 2000-03-07 ## 19 CLEVELAND WARD 4 PRIMARY 2000-03-07 ## 20 FAIRFIELD CTY WARD 1 PRIMARY 2000-03-07 ## party ## 1 &lt;NA&gt; ## 2 &lt;NA&gt; ## 3 &lt;NA&gt; ## 4 &lt;NA&gt; ## 5 &lt;NA&gt; ## 6 &lt;NA&gt; ## 7 &lt;NA&gt; ## 8 &lt;NA&gt; ## 9 &lt;NA&gt; ## 10 &lt;NA&gt; ## 11 &lt;NA&gt; ## 12 &lt;NA&gt; ## 13 &lt;NA&gt; ## 14 Democrat ## 15 Independent ## 16 &lt;NA&gt; ## 17 &lt;NA&gt; ## 18 &lt;NA&gt; ## 19 &lt;NA&gt; ## 20 &lt;NA&gt; ## [ reached &#39;max&#39; / getOption(&quot;max.print&quot;) -- omitted 599980 rows ] 7.3.5 Creating targets One thing that you will need to do is identify your potential voter base. These voters are sometimes referred to as your “targets” or your voter “universe”. Each voter is a unique culmination of experience, opinions, and biases. As such, not every person will be willing to vote for your candidate or maybe to even vote at all. Some people are habitual voters who vote in every election and always along party lines. Others may only sometimes vote in a general election. And others might not vote consistently along party lines. Due to the never ending complexities that are peoples’ preferences and persuasions it is important to break the pool of potential voters down into smaller groups which I will refer to as tiers. We will break our voters into three distinct tiers. These categorizations are rather crude. Work with your state leadership team to determine the best way to segment your voter base. Tier 1. Base voters - registered Democrats who have voted Democrat in a primary Tier 2. Motivation - are not registered with a party but have voted Democrat in a primary Tier 3. Persuasion - folks that have voted Democrat in a priimary but aren’t registered as such To begin this process, we want to identify everyone who has voted Democrat in a primary. We will filter sw_clean to these criteria. Then we will count the number of times each voter has voted for a Democrat. This will then be joined back to the original data frame so we can identify those people who have voted Democrat even if it conflicts with their party registration. # One thing that you will need to do is to identify your target base voters. These will most likely be those who have voted Democrat in previous primaries. Then we will compare those people with their registered party. primary_dems &lt;- sw_clean %&gt;% filter(election_type == &quot;PRIMARY&quot;, party == &quot;Democrat&quot;) %&gt;% count(sos_voterid, party) primary_dems ## # A tibble: 3,588 x 3 ## sos_voterid party n ## &lt;chr&gt; &lt;chr&gt; &lt;int&gt; ## 1 OH0010002426 Democrat 1 ## 2 OH0010004408 Democrat 1 ## 3 OH0010012148 Democrat 1 ## 4 OH0010012441 Democrat 3 ## 5 OH0010013144 Democrat 1 ## 6 OH0010015404 Democrat 1 ## 7 OH0010015734 Democrat 1 ## 8 OH0010019098 Democrat 2 ## 9 OH0010020566 Democrat 1 ## 10 OH0010021800 Democrat 1 ## # … with 3,578 more rows Now that we have a table of everyone who has voted for a Democrat in a primary, we need to join this back onto the original voter file. The motivation for this is that by joining back onto the orginal table we can then use some of the other information that it provides such as party affiliation and birth year, among others. # join these back to the original voter file to get additional information potential_targets &lt;- inner_join(primary_dems, swvf, by = c(&quot;sos_voterid&quot; = &quot;SOS_VOTERID&quot;)) %&gt;% janitor::clean_names() %&gt;% select(sos_voterid, party_affiliation, precinct_name, date_of_birth, registration_date, party, n) %&gt;% mutate(age = as.integer((Sys.Date() - lubridate::ymd(date_of_birth)) / 365)) select(potential_targets, sos_voterid, precinct_name, party_affiliation, age, n) %&gt;% arrange(-n) ## # A tibble: 3,588 x 5 ## sos_voterid precinct_name party_affiliation age n ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; ## 1 OH0010322183 PRECINCT ASHTABULA 2-A D 68 14 ## 2 OH0015532776 ATHENS 3-4 D 63 14 ## 3 OH0010329359 PRECINCT ASHTABULA 5-A D 56 13 ## 4 OH0014653051 EAST CLEVELAND-03-C D 79 13 ## 5 OH0014799002 PARMA-04-A D 60 13 ## 6 OH0014805561 PARMA-05-A D 65 13 ## 7 OH0015041796 SOLON-02-B D 67 13 ## 8 OH0010327092 PRECINCT ASHTABULA 2-B D 61 12 ## 9 OH0010330463 PRECINCT ASHTABULA 5-B D 79 12 ## 10 OH0011536605 PRECINCT E LIVERPOOL 4-A D 61 12 ## # … with 3,578 more rows Let’s create some cross tables to identify how many times people of each party voted for a Demorat in a primary. # generate some cross-tabs. Everyone loves cross tabs. count(potential_targets, party_affiliation, party) %&gt;% mutate(prop = round(n / sum(n), 2)) ## # A tibble: 4 x 4 ## party_affiliation party n prop ## &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; ## 1 &quot;&quot; Democrat 1093 0.3 ## 2 D Democrat 1828 0.51 ## 3 G Democrat 4 0 ## 4 R Democrat 663 0.18 What is most telling from this table is that 30% of individuals who voted for a Democrat in the primary have no party affiliation. Now that we have a data frame with voter IDs and their registered party. We can begin segmenting this group based on the afore mentioned definitions. This will be done with a basic case_when() statement. # Tier 1 base dems will be those that are registered dem and have voted dem # we will tier our targets # Tier 2 will be our motivation group. # Those that aren&#39;t registered with a party, but have voted Dem # Tier 3 will be our persuasion group. # These are the folks that have voted Dem but aren&#39;t registered as such. # export thiws and upload to VAN or other management software. targets &lt;- potential_targets %&gt;% mutate(tier = case_when( party_affiliation == &quot;D&quot; ~ 1, party_affiliation == &quot;&quot; ~ 2, !party_affiliation %in% c(&quot;&quot;, &quot;D&quot;) ~ 3 )) Now select voter ID and tier, write as a csv, and bulk upload into VAN! ## # A tibble: 3 x 5 ## tier med_age n_primaries tier_size `n_primaries/sum(n_primaries)` ## &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 1 59 8071 1828 0.700 ## 2 2 56 2026 1093 0.176 ## 3 3 62 1436 667 0.125 "]
]
